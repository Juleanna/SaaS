from django.urls import reverse_lazy, NoReverseMatch
from django.conf import settings
import logging

logger = logging.getLogger(__name__)

def validate_admin_navigation():
    """–í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Å—ñ—Ö URL –≤ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó Unfold Admin"""
    errors = []
    
    if not hasattr(settings, 'UNFOLD') or 'SIDEBAR' not in settings.UNFOLD:
        return ['UNFOLD SIDEBAR not configured']
    
    navigation = settings.UNFOLD['SIDEBAR'].get('navigation', [])
    
    for section in navigation:
        section_title = section.get('title', 'Unknown section')
        items = section.get('items', [])
        
        for item in items:
            item_title = item.get('title', 'Unknown item')
            link_func = item.get('link')
            
            if link_func and callable(link_func):
                try:
                    # –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–∫ request
                    class MockRequest:
                        def __init__(self):
                            self.user = None
                    
                    mock_request = MockRequest()
                    url = link_func(mock_request)
                    
                    if isinstance(url, str):
                        logger.info(f"‚úì {section_title} -> {item_title}: {url}")
                    else:
                        errors.append(f"‚úó {section_title} -> {item_title}: URL function returned non-string")
                        
                except NoReverseMatch as e:
                    errors.append(f"‚úó {section_title} -> {item_title}: {str(e)}")
                except Exception as e:
                    errors.append(f"‚úó {section_title} -> {item_title}: Unexpected error - {str(e)}")
    
    return errors

def check_admin_registrations():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –º–æ–¥–µ–ª–µ–π –≤ admin"""
    from django.contrib import admin
    from django.apps import apps
    
    registered_models = set()
    unregistered_models = []
    
    # –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –º–æ–¥–µ–ª—ñ
    for model, model_admin in admin.site._registry.items():
        app_label = model._meta.app_label
        model_name = model._meta.model_name
        registered_models.add(f"{app_label}.{model_name}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –º–æ–¥–µ–ª—ñ –∑ –Ω–∞—à–∏—Ö –¥–æ–¥–∞—Ç–∫—ñ–≤
    our_apps = ['accounts', 'stores', 'products', 'orders', 'payments', 
                'warehouse', 'pricelists', 'notifications', 'telegram_bot']
    
    for app_name in our_apps:
        try:
            app_config = apps.get_app_config(app_name)
            for model in app_config.get_models():
                model_key = f"{app_name}.{model._meta.model_name}"
                if model_key not in registered_models:
                    unregistered_models.append(model_key)
        except LookupError:
            continue
    
    return {
        'registered': sorted(registered_models),
        'unregistered': sorted(unregistered_models)
    }

def run_admin_diagnostics():
    """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–æ–≤–Ω—É –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫—É admin –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
    print("üîç –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Unfold Admin...")
    print("=" * 50)
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    print("\nüìã –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó:")
    nav_errors = validate_admin_navigation()
    if nav_errors:
        print("‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–º–∏–ª–∫–∏ –≤ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó:")
        for error in nav_errors:
            print(f"  - {error}")
    else:
        print("‚úÖ –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –≤–∞–ª—ñ–¥–Ω–∞")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π
    print("\nüìù –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –º–æ–¥–µ–ª–µ–π:")
    registrations = check_admin_registrations()
    
    print(f"‚úÖ –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(registrations['registered'])}")
    for model in registrations['registered']:
        print(f"  ‚úì {model}")
    
    if registrations['unregistered']:
        print(f"\n‚ö†Ô∏è  –ù–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(registrations['unregistered'])}")
        for model in registrations['unregistered']:
            print(f"  - {model}")
    else:
        print("\n‚úÖ –í—Å—ñ –º–æ–¥–µ–ª—ñ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ")
    
    return {
        'navigation_errors': nav_errors,
        'registrations': registrations
    }

if __name__ == "__main__":
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
    django.setup()
    run_admin_diagnostics()